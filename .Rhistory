n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_
full_4_minutes_data") +
ggtitle ("Note:Does latency to solve barrier problem predict average
numerosity performance (full 4 minutes)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=200, y=0.3, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_
T30_to_T50_data") +
ggtitle ("Note:Does latency to solve barrier problem predict average
numerosity performance (T30 to T50)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_full_4_minutes_data ~ df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_full_4_minutes_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_full_4_minutes_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.2, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_full_problem_time_to_social_reward_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials
_using_full_4_minutes_data") +
ggtitle ("Note:Does latency to solve full solution problem predict average
performance (full 4 minutes)?") +
geom_smooth(method = "lm")
df.full<-df.full %>% mutate(detour_trial_1_solved_code = detour_trial_1_did_fish_solve_barrier_problem + detour_trial_1_did_fish_solve_full_social_problem )
ggplot(df.full, aes(detour_trial_1_solved_code, fill = sex.y))+
geom_histogram() +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2)?")
df.full$detour_trial_1_did_fish_solve_full_social_problem <- as.character(df.full$detour_trial_1_did_fish_solve_full_social_problem)
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) +
geom_boxplot()+ stat_n_text()
p
fit <- aov(average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ detour_trial_1_did_fish_solve_barrier_problem, data=df.full)
p_value<- summary(fit)[[1]][["Pr(>F)"]][[1]]
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0, label= glue::glue("p (ANOVA) = {round(p_value,4)}"), size = 6, color = "black")
p
df.full$detour_trial_1_did_fish_solve_barrier_problem
df.full$fish_name
View(det)
df
df$fish_name
df<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Comparative Cognition R Scripts/Numerosity Comparative Cognition Full Dataset April_9_2018.csv", col_names = TRUE, col_types = NULL)
View(df)
det<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Detour/detour_data_for_R_April_5_2018.csv", col_names = TRUE, col_types = NULL)
View(det)
df.full<- full_join(df,det, by = 'fish_name')
df.full
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_full_4_minutes_data ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_full_4_minutes_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_full_4_minutes_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_
full_4_minutes_data") +
ggtitle ("Note:Does latency to solve barrier problem predict average
numerosity performance (full 4 minutes)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=200, y=0.3, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_
T30_to_T50_data") +
ggtitle ("Note:Does latency to solve barrier problem predict average
numerosity performance (T30 to T50)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_full_4_minutes_data ~ df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_full_4_minutes_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_full_4_minutes_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.2, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_full_problem_time_to_social_reward_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials
_using_full_4_minutes_data") +
ggtitle ("Note:Does latency to solve full solution problem predict average
performance (full 4 minutes)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.2, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_T30_to_T50_data") +
ggtitle ("Note:Does latency to solve full solution problem predict average
performance (T30 to T50)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=300, y=100, label= glue::glue("p = {round(p_value,8)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="detour_trial_1_full_problem_time_to_social_reward_
minus_time_to_contact_barrier") +
ggtitle ("Note:Does latency to solve barrier problem predict latency to solve full social problem?") +
geom_smooth(method = "lm")
df.full<-df.full %>% mutate(detour_trial_1_solved_code = detour_trial_1_did_fish_solve_barrier_problem + detour_trial_1_did_fish_solve_full_social_problem )
ggplot(df.full, aes(detour_trial_1_solved_code, fill = sex.y))+
geom_histogram() +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2)?")
df.full$detour_trial_1_did_fish_solve_full_social_problem <- as.character(df.full$detour_trial_1_did_fish_solve_full_social_problem)
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) +
geom_boxplot()+ stat_n_text()
p
fit <- aov(average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ detour_trial_1_did_fish_solve_barrier_problem, data=df.full)
p_value<- summary(fit)[[1]][["Pr(>F)"]][[1]]
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0, label= glue::glue("p (ANOVA) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0, label= glue::glue("p (ANOVA) = {round(p_value,4)}"), size = 6, color = "black")
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0, label= glue::glue("p (ANOVA) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
library(ggplot2)
library(dplyr)
library(rmarkdown)
library(knitr)
library(readr)
library(utils)
hand_file_list <- list.files("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/numerosity cc score sheets", pattern = "*.csv")
track_file_list <-list.files("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/april_1_richie_cowlogs_from_tracker/use_for_comparison", pattern = "*.csv")
hand_test_column <- vector(length = length(hand_file_list))
df.hand<- data.frame(fishname = hand_test_column)
track_test_column <- vector(length = length(track_file_list))
df.track<- data.frame(vidID = track_test_column)
for(i in 1:length(hand_file_list)){
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/numerosity cc score sheets")
fil <- read_csv(hand_file_list[i], col_names = TRUE, col_types = NULL)
filename <- hand_file_list[i]
filename<-strsplit(filename, ".csv")[[1]][1]
filename
filename.scorername<-strsplit(filename, "_")[[1]][3]
filename.scorername
filename.fishname<-strsplit(filename, "_")[[1]][4]
filename.fishname<-gsub(" ", "", filename.fishname)
filename.fishname
filename.day<-strsplit(filename, "_")[[1]][5]
filename.day
filename.trial<-strsplit(filename, "_")[[1]][6]
filename.trial
filename.rightstim<-strsplit(filename, "_")[[1]][7]
filename.rightstim
filename.leftstim<-strsplit(filename, "_")[[1]][8]
filename.leftstim
filename.sex<-strsplit(filename, "_")[[1]][11]
filename.sex
filename.vidID<-combine(filename.fishname, filename.day, filename.trial)
filename.vidID<-paste(filename.vidID, collapse="")
filename.vidID<-tolower(filename.vidID)
fil$code<-gsub(" ", "", fil$code)
fil$code<-tolower(fil$code)
fil.entries<-nrow(fil)
change_index <- which(fil$time > 240.04)[1]-1
fil$time[change_index]<- 240.04
fil<-filter(fil, time <= 240.04)
fil<-mutate(fil, time.difference = -(time -lead(time)))
fil$time.difference <- replace(fil$time.difference, c(1), (fil$time[2])) #use only if you're starting at time = 0 seconds
fil.end<-fil[fil$code == "end",]
fil.center<-fil[fil$code == "center",]
fil.leftscreen<-fil[fil$code == "leftscreen",]
fil.rightscreen<-fil[fil$code == "rightscreen",]
fil.topleftthigmo<-fil[fil$code == "topleftthigmo",]
fil.toprightthigmo<-fil[fil$code == "toprightthigmo",]
fil.bottomleftthigmo<-fil[fil$code == "bottomleftthigmo",]
fil.bottomrightthigmo<-fil[fil$code == "bottomrightthigmo",]
fil.topmirror<-fil[fil$code == "topmirror",]
fil.bottommirror<-fil[fil$code == "bottommirror",]
df.hand$fishname[i]<-filename.fishname
df.hand$fishname[i]<-tolower(df.hand$fishname[i])
df.hand$sex[i]<- filename.sex
df.hand$hand_scorer_name[i]<-filename.scorername
df.hand$day[i]<-filename.day
df.hand$trial[i]<-filename.trial
df.hand$vidID[i]<-filename.vidID
df.hand$hand_number_entries[i]<-fil.entries -1
df.hand$hand_total_time[i]<-(sum(fil.end$time))
if(df.hand$hand_total_time[i] == 0){
df.hand$hand_total_time[i]<-240.04}
else{
df.hand$hand_total_time[i]<-df.hand$hand_total_time[i]}
df.hand$hand_seconds_center[i]<-sum(fil.center$time.difference)
df.hand$hand_seconds_leftscreen[i]<-sum(fil.leftscreen$time.difference)
df.hand$hand_seconds_rightscreen[i]<-sum(fil.rightscreen$time.difference)
df.hand$hand_seconds_center[is.na(df.hand$hand_seconds_center)] <- 0
df.hand$hand_seconds_leftscreen[is.na(df.hand$hand_seconds_leftscreen)] <- 0
df.hand$hand_seconds_rightscreen[is.na(df.hand$hand_seconds_rightscreen)] <- 0
topleft_thigmo_sum <- sum(fil.topleftthigmo$time.difference, na.rm = TRUE)
topright_thigmo_sum <- sum(fil.toprightthigmo$time.difference, na.rm = TRUE)
bottomleft_thigmo_sum <- sum(fil.bottomleftthigmo$time.difference, na.rm = TRUE)
bottomright_thigmo_sum <- sum(fil.bottomrightthigmo$time.difference, na.rm = TRUE)
top_mirror <- sum(fil.topmirror$time.difference, na.rm = TRUE)
bottom_mirror<- sum(fil.bottommirror$time.difference, na.rm = TRUE)
df.hand$hand_seconds_total_thigmo[i]<- (topleft_thigmo_sum + topright_thigmo_sum + bottomleft_thigmo_sum + bottomright_thigmo_sum)
df.hand$hand_seconds_total_mirror[i]<- (top_mirror + bottom_mirror)
}
View(df.hand)
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
df.full$detour_trial_1_did_fish_solve_full_social_problem <-as.character(df.full$detour_trial_1_did_fish_solve_full_social_problem)
df.full<-df.full %>% mutate(detour_trial_1_solved_code = detour_trial_1_did_fish_solve_barrier_problem + detour_trial_1_did_fish_solve_full_social_problem )
df.full<-df.full %>% mutate(detour_trial_1_solved_code = detour_trial_1_did_fish_solve_barrier_problem + detour_trial_1_did_fish_solve_full_social_problem )
df.full$detour_trial_1_solved_code
ggplot(df.full, aes(detour_trial_1_solved_code, fill = sex.y))+
geom_histogram() +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2)?")
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) +
geom_boxplot()+ stat_n_text()
p
test<-t.test(df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individuals who solve the full social problem have shorter latencies to solving the barrier problem?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individuals who solve the full social problem have
shorter latencies to solving the barrier problem?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_latency_to_enter_correct_side~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_latency_to_enter_correct_side)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus
did not solve barrier problem) predict numerosity average latency to enter correct side?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
colnames(df.full)
test<-t.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data~detour_trial_1_did_fish_solve_barrier_problem)
test<-t.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=mean_of_median_performance_on_each_ratio_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=mean_of_median_performance_on_each_ratio_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve barrier problem) predict numerosity performance (mean of medians)?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=mean_of_median_performance_on_each_ratio_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve barrier problem)
predict numerosity performance (mean of medians)?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
```{r}
test<-t.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=mean_of_median_performance_on_each_ratio_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve barrier problem)
predict numerosity performance (mean of medians)?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_latency_to_enter_correct_side~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=average_latency_to_enter_correct_side)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus
did not solve barrier problem) predict numerosity average latency to enter correct side?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data ~ df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=mean_of_median_performance_on_each_ratio_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve barrier problem)
predict numerosity performance (mean of medians)?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_full_4_minutes_data ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)
df<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Comparative Cognition R Scripts/Numerosity Comparative Cognition Full Dataset April_9_2018.csv", col_names = TRUE, col_types = NULL)
View(df)
det<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Detour/detour_data_for_R_April_5_2018.csv", col_names = TRUE, col_types = NULL)
View(det)
df.full<- full_join(df,det, by = 'fish_name')
df.full
df.full<-df.full %>% mutate(detour_trial_1_solved_code = detour_trial_1_did_fish_solve_barrier_problem + detour_trial_1_did_fish_solve_full_social_problem )
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
df.full$detour_trial_1_did_fish_solve_full_social_problem <-as.character(df.full$detour_trial_1_did_fish_solve_full_social_problem)
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_full_4_minutes_data ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_full_4_minutes_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_full_4_minutes_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_
full_4_minutes_data") +
ggtitle ("Note:Does latency to solve barrier problem predict average
numerosity performance (full 4 minutes)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=200, y=0.3, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_
T30_to_T50_data") +
ggtitle ("Note:Does latency to solve barrier problem predict average
numerosity performance (T30 to T50)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.2, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_T30_to_T50_data") +
ggtitle ("Note:Does latency to solve full solution problem predict average
performance (T30 to T50)?") +
geom_smooth(method = "lm")
test<-t.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data ~ df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=mean_of_median_performance_on_each_ratio_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve barrier problem)
predict numerosity performance (mean of medians)?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
df.full<-df.full %>% mutate(detour_trial_1_latency_to_enter_reward_following_barrier_solution) = detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier- detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)
df.full<-df.full %>% mutate(detour_trial_1_latency_to_enter_reward_following_barrier_solution = detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier- detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)
mod<- lm(df.full$detour_trial_1_latency_to_enter_reward_following_barrier_solution ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(detour_trial_1_latency_to_enter_reward_following_barrier_solution)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, detour_trial_1_latency_to_enter_reward_following_barrier_solution))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=300, y=100, label= glue::glue("p = {round(p_value,8)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
ggtitle ("Does latency to solve barrier problem predict latency to enter reward zone following barrier solution?") +
geom_smooth(method = "lm")
mod<- lm(df.full$detour_trial_1_latency_to_enter_reward_following_barrier_solution ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(detour_trial_1_latency_to_enter_reward_following_barrier_solution)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, detour_trial_1_latency_to_enter_reward_following_barrier_solution))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=300, y=100, label= glue::glue("p = {round(p_value,8)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
ggtitle ("Does latency to solve barrier problem predict
latency to enter reward zone following barrier solution?") +
geom_smooth(method = "lm")
colnames(det)
test<-t.test(df.full$time_to_barrier_contact_minus_start_time~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=time_to_barrier_contact_minus_start_time)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individual who solev the full social problem have lower latencies to approach the barrier (higher motivation?)') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$time_to_barrier_contact_minus_start_time~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=time_to_barrier_contact_minus_start_time)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individual who solev the full social problem have lower latencies
to approach the barrier (higher motivation?)') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$time_to_barrier_contact_minus_start_time~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=time_to_barrier_contact_minus_start_time)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individual who solev the full social problem have lower latencies
to approach the barrier (higher motivation?)') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$time_to_barrier_contact_minus_start_time~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value<- test %>% broom::tidy() %>% select(p.value) %>% unlist
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=time_to_barrier_contact_minus_start_time)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individual who solve the barrier problem have lower latencies
to approach the barrier (higher motivation?)') +
geom_text(x=1, y=0.1, label= glue::glue("p (t.test) = {round(p_value,4)}"), size = 6, color = "black")
p
