df$entries_T0_to_T29[i]<-fil.entries -1
}
#2b. determine which zone is "correct" versus "incorrect"" and get proportion time in those zones
for(i in 1:length(file_list)){
if(df$correctside[i] == "R"){
df$correctscreen_full_4_minutes[i]<-df$rightscreen_full_4_minutes[i]
df$incorrectscreen_full_4_minutes[i]<-df$leftscreen_full_4_minutes[i]
df$correctscreen_T30_to_T50[i]<-df$rightscreen_T30_to_T50[i]
df$incorrectscreen_T30_to_T50[i]<-df$leftscreen_T30_to_T50[i]
df$correctscreen_full_4_minutes_absolute_seconds[i]<-df$rightscreen_full_4_minutes_absolute_seconds[i]
df$incorrectscreen_full_4_minutes_absolute_seconds[i]<- df$leftscreen_full_4_minutes_absolute_seconds[i]
df$correctscreen_T30_to_T50_absolute_seconds[i]<- df$rightscreen_T30_to_T50_absolute_seconds[i]
df$incorrectscreen_T30_to_T50_absolute_seconds[i]<- df$leftscreen_T30_to_T50_absolute_seconds[i]
}
else if(df$correctside[i] == "L"){
df$correctscreen_full_4_minutes[i]<-df$leftscreen_full_4_minutes[i]
df$incorrectscreen_full_4_minutes[i]<-df$rightscreen_full_4_minutes[i]
df$correctscreen_T30_to_T50[i]<-df$leftscreen_T30_to_T50[i]
df$incorrectscreen_T30_to_T50[i]<-df$rightscreen_T30_to_T50[i]
df$correctscreen_full_4_minutes_absolute_seconds[i]<-df$leftscreen_full_4_minutes_absolute_seconds[i]
df$incorrectscreen_full_4_minutes_absolute_seconds[i]<- df$rightscreen_full_4_minutes_absolute_seconds[i]
df$correctscreen_T30_to_T50_absolute_seconds[i]<-  df$leftscreen_T30_to_T50_absolute_seconds[i]
df$incorrectscreen_T30_to_T50_absolute_seconds[i]<- df$rightscreen_T30_to_T50_absolute_seconds[i]
}
else if(df$correctside[i] == "B"){
#df$totalcorrect[i]<- NA
#df$totalincorrect[i]<-NA
df$correctscreen_full_4_minutes[i]<-NA
df$incorrectscreen_full_4_minutes[i]<-NA
df$correctscreen_T30_to_T50[i]<-NA
df$incorrectscreen_T30_to_T50[i]<-NA
df$correctscreen_full_4_minutes_absolute_seconds[i]<- NA
df$incorrectscreen_full_4_minutes_absolute_seconds[i]<- NA
df$correctscreen_T30_to_T50_absolute_seconds[i]<- NA
df$incorrectscreen_T30_to_T50_absolute_seconds[i]<- NA
}
else{
df$correctscreen_full_4_minutes[i]<-NA
df$incorrectscreen_full_4_minutes[i]<-NA
df$correctscreen_T30_to_T50[i]<-NA
df$incorrectscreen_T30_to_T50[i]<-NA
df$correctscreen_full_4_minutes_absolute_seconds[i]<- NA
df$incorrectscreen_full_4_minutes_absolute_seconds[i]<- NA
df$correctscreen_T30_to_T50_absolute_seconds[i]<- NA
df$incorrectscreen_T30_to_T50_absolute_seconds[i]<- NA
}
}
#2c. get trial ID column
df$trialID <- paste(df$day,df$trial, sep= "")
#df[, c(2,12, 26)] <- sapply(df[, c(16,17, 26)], as.numeric)
#3a. Proportion time in correct screen / (proportion time in correct screen+ proportion time in incorrect screen)
for(i in 1:length(file_list)){
df$performancescreen_full_4_minutes[i] <- (df$correctscreen_full_4_minutes[i]) / (df$correctscreen_full_4_minutes[i] + df$incorrectscreen_full_4_minutes[i])
df$performancescreen_T30_to_T50[i] <- (df$correctscreen_T30_to_T50[i]) / (df$correctscreen_T30_to_T50[i] + df$incorrectscreen_T30_to_T50[i])
}
#3b. Was this performance greater than 60%? Yes or no
for(i in 1:length(file_list)){
if(is.na(df$performancescreen_full_4_minutes[i]) == TRUE){
df$perf_greater_than_60_full_4_minutes[i] <- NA}
else if(df$performancescreen_full_4_minutes[i] >= 0.6){
df$perf_greater_than_60_full_4_minutes[i] <- 1 } #yes
else if(df$performancescreen_full_4_minutes[i] < 0.6){
df$perf_greater_than_60_full_4_minutes[i] <- 0} #no
if(is.na(df$performancescreen_T30_to_T50[i]) == TRUE){
df$perf_greater_than_60_T30_to_T50[i] <- NA}
else if(df$performancescreen_T30_to_T50[i] >= 0.6){
df$perf_greater_than_60_T30_to_T50[i] <- 1 } #yes
else if(df$performancescreen_T30_to_T50[i] < 0.6){
df$perf_greater_than_60_T30_to_T50[i] <- 0} #no
}
#4a. Latency to react to screen (i.e. move to any zone after T30)
for(i in 1:length(file_list)){
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/numerosity cc score sheets")
fil <- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
fil$code<-gsub(" ", "", fil$code)
fil$code<-tolower(fil$code)
change_index <- which(fil$time > 30)[1]-1
fil$time[change_index]<- 30
fil<-filter(fil, time >= 30)
#change_index2<- which(fil$time >=50)[1]
#fil$time[change_index2]<- 50
#fil<-filter(fil, time <= 50)
#fil<-mutate(fil, time.difference = -(time -lead(time, default = 50)))
df$reaction_time[i]<- ((fil$time[2]) - 30)
}
#4b. Latency to enter correct side and incorrect side
for(i in 1:length(file_list)){
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/numerosity cc score sheets")
fil <- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
fil$code<-gsub(" ", "", fil$code)
fil$code<-tolower(fil$code)
fil.entries<-nrow(fil)
change_index <- which(fil$time > 30)[1]-1
fil$time[change_index]<- 30
fil<-filter(fil, time >= 30)
#change_index2<- which(fil$time >=50)[1]
#fil$time[change_index2]<- 50
#fil<-filter(fil, time <= 50)
#fil<-mutate(fil, time.difference = -(time -lead(time, default = 50)))
first_rightscreen_index <- which(fil$code == "rightscreen")[1]
first_leftscreen_index <-which(fil$code == "leftscreen")[1]
if(df$correctside[i] == "R"){
df$latency_enter_corr[i]<- fil$time[first_rightscreen_index] - 30
df$latency_enter_incorr[i]<-fil$time[first_leftscreen_index] - 30 }
else if(df$correctside[i] == "L"){
df$latency_enter_corr[i]<- fil$time[first_leftscreen_index] - 30
df$latency_enter_incorr[i]<- fil$time[first_rightscreen_index] - 30}
else{
df$latency_enter_corr[i]<- NA
df$latency_enter_incorr[i]<- NA }
#df$latency_enter_incorr[is.na(df$latency_enter_incorr)] <- 100
#df$latency_enter_corr[is.na(df$latency_enter_corr)] <- 100
}
#4c/d. Determine which side was entered first (correct or incorrect) and remove latency value if latency to enter correct or incorrect side = 0 i.e. fish was already there
for(i in 1:length(file_list)){
if(is.na(df$latency_enter_corr[i] < df$latency_enter_incorr[i]) == TRUE){
df$screen_entered_first[i]<- NA}
else if(df$latency_enter_corr[i] == 0){
df$latency_enter_corr[i] <- NA
df$screen_entered_first[i]<- NA}
else if(df$latency_enter_incorr[i] == 0){
df$latency_enter_incorr[i] <- NA
df$screen_entered_first[i]<- NA}
else if((df$latency_enter_corr[i] < df$latency_enter_incorr[i]) == TRUE){
df$screen_entered_first[i]<- "correct"}
else if((df$latency_enter_corr[i] < df$latency_enter_incorr[i]) == FALSE){
df$screen_entered_first[i]<- "incorrect"}
}
#Based on which side was entered first, correct or incorrect, find latency to enter EITHER screen zone (aka decision speed)
for(i in 1:length(file_list)){
if(is.na(df$screen_entered_first[i]) == TRUE){
df$latency_enter_either_screen[i]<- NA}
else if(df$screen_entered_first[i] == "incorrect"){
df$latency_enter_either_screen[i]<-(df$latency_enter_incorr[i])}
else if(df$screen_entered_first[i] == "correct"){
df$latency_enter_either_screen[i]<-(df$latency_enter_corr[i])}
}
#If fish entered the incorrect side first on a given trial, then make a new column which is latency to enter the correct side but if fish picked incorrect first the latency to enter first then latency to enter correct is NA has either latency or NA
df<-mutate(df, latency_enter_corr_filtered_just_correct_choice = latency_enter_corr)
for(i in 1:length(df)){
if (is.na(df$screen_entered_first[i]) == TRUE){
df$latency_enter_corr_filtered_just_correct_choice[i]<- df$latency_enter_corr_filtered_just_correct_choice[i]}
else if(df$screen_entered_first[i] == "incorrect"){
df$latency_enter_corr_filtered_just_correct_choice[i]<- NA}
else if(df$screen_entered_first[i] == "correct"){
df$latency_enter_corr_filtered_just_correct_choice[i]<- df$latency_enter_corr_filtered_just_correct_choice[i]}
}
#Make a summary master data frame (df.sum), where there will be one row per form and within that row I will have both summary data and data about performance on each trial. This chunk pulls out relevant information about each trial (i.e. correct side, performance, latency to enter correct) and adds it into this summary master data frame.
#From around march 5- OK so this part is a little different than the plan, hopefully I'll be able to just take pieces of this big chunk and distribute it accordingly. I'm first putting the important metric for each trial in a bunch of columns, each row being 1 fish. Then I'll get some summary stats (i.e. median performance on 75 ratio) and append those as new columns (keeping one row per fish).
fish_list<-unique(df$fishname)
df.sum<- data.frame(fish_name = fish_list)
#There are three trials in which the fish was in the correct screen at time T=30 so we can't use their performance info. I'm getting rid of those three trials manually so this should be fixed
#The three trials are: Gideon's 10_3, Wildflower's 10_5, and Willis' 11_5
for(i in 1:length(fish_list)){
df.fish<- filter(df, fishname == fish_list[i])
if (df.fish$fishname[1] == 'gideon'){
df.fish$leftscreen_full_4_minutes[2]<-NA
df.fish$rightscreen_full_4_minutes[2]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$leftscreen_T30_to_T50[2]<-NA
df.fish$rightscreen_T30_to_T50[2]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$correctscreen_full_4_minutes[2]<-NA
df.fish$incorrectscreen_full_4_minutes[2]<-NA
df.fish$correctscreen_T30_to_T50[2]<-NA
df.fish$incorrectscreen_T30_to_T50[2]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$performancescreen_full_4_minutes[2]<-NA
df.fish$performancescreen_T30_to_T50[2]<-NA
df.fish$perf_greater_than_60_full_4_minutes[2]<-NA
df.fish$perf_greater_than_60_T30_to_T50[2]<-NA
df.fish$latency_enter_corr[2]<-NA
df.fish$latency_enter_incorr[2]<-NA
df.fish$screen_entered_first[2]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[2]<-NA
df.fish$totalthigmo_full_4_minutes[2]<-NA
df.fish$totalmirror_full_4_minutes[2]<-NA
df.fish$unique_zones_entered[2]<-NA
df.fish$entries_into_center_full_4_minutes[2]<-NA
df.fish$latency_enter_either_screen[2]<-NA
df.fish$center_full_4_minutes[2]<-NA
}
if (df.fish$fishname[1] == 'wildflower'){
df.fish$leftscreen_full_4_minutes[3]<-NA
df.fish$rightscreen_full_4_minutes[3]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$leftscreen_T30_to_T50[3]<-NA
df.fish$rightscreen_T30_to_T50[3]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$correctscreen_full_4_minutes[3]<-NA
df.fish$incorrectscreen_full_4_minutes[3]<-NA
df.fish$correctscreen_T30_to_T50[3]<-NA
df.fish$incorrectscreen_T30_to_T50[3]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$performancescreen_full_4_minutes[3]<-NA
df.fish$performancescreen_T30_to_T50[3]<-NA
df.fish$perf_greater_than_60_full_4_minutes[3]<-NA
df.fish$perf_greater_than_60_T30_to_T50[3]<-NA
df.fish$latency_enter_corr[3]<-NA
df.fish$latency_enter_incorr[3]<-NA
df.fish$screen_entered_first[3]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[3]<-NA
df.fish$totalthigmo_full_4_minutes[3]<-NA
df.fish$totalmirror_full_4_minutes[3]<-NA
df.fish$unique_zones_entered[3]<-NA
df.fish$entries_into_center_full_4_minutes[3]<-NA
df.fish$latency_enter_either_screen[3]<-NA
df.fish$center_full_4_minutes[3]<-NA
}
if (df.fish$fishname[1] == 'willis'){
df.fish$leftscreen_full_4_minutes[6]<-NA
df.fish$rightscreen_full_4_minutes[6]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$leftscreen_T30_to_T50[6]<-NA
df.fish$rightscreen_T30_to_T50[6]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$correctscreen_full_4_minutes[6]<-NA
df.fish$incorrectscreen_full_4_minutes[6]<-NA
df.fish$correctscreen_T30_to_T50[6]<-NA
df.fish$incorrectscreen_T30_to_T50[6]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$performancescreen_full_4_minutes[6]<-NA
df.fish$performancescreen_T30_to_T50[6]<-NA
df.fish$perf_greater_than_60_full_4_minutes[6]<-NA
df.fish$perf_greater_than_60_T30_to_T50[6]<-NA
df.fish$latency_enter_corr[6]<-NA
df.fish$latency_enter_incorr[6]<-NA
df.fish$screen_entered_first[6]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[6]<-NA
df.fish$totalthigmo_full_4_minutes[6]<-NA
df.fish$totalmirror_full_4_minutes[6]<-NA
df.fish$unique_zones_entered[6]<-NA
df.fish$entries_into_center_full_4_minutes[6]<-NA
df.fish$latency_enter_either_screen[6]<-NA
df.fish$center_full_4_minutes[6]<-NA
}
df.fish$prop_time_thigmo_T0_to_T29 <-as.numeric(df.fish$prop_time_thigmo_T0_to_T29)
df.fish$prop_time_mirror_T0_to_T29 <-as.numeric(df.fish$prop_time_mirror_T0_to_T29)
df.fish$entries_T0_to_T29 <-as.numeric(df.fish$entries_T0_to_T29)
df.fish$entries_T30_to_T50 <-as.numeric(df.fish$entries_T30_to_T50)
df.fish$entries_full_4_minutes <-as.numeric(df.fish$entries_full_4_minutes)
df.sum$sex[i]<-df.fish$sex[1]
df.sum$standard_length[i]<-df.fish$stdlength[1]
df.sum$order[i]<- df.fish$order[1]
df.sum$average_prop_time_thigmo_T0_to_T29[i]<- mean(df.fish$prop_time_thigmo_T0_to_T29, na.rm = TRUE)
df.sum$average_prop_time_mirror_T0_to_T29[i]<-mean(df.fish$prop_time_mirror_T0_to_T29, na.rm = TRUE)
df.sum$average_number_of_entries_T0_to_T29[i]<-mean(df.fish$entries_T0_to_T29, na.rm = TRUE)
df.sum$average_number_of_entries_T30_to_T50[i]<-mean(df.fish$entries_T30_to_T50, na.rm = TRUE)
df.sum$average_number_of_entries_full_4_minutes[i]<-mean(df.fish$entries_full_4_minutes, na.rm = TRUE)
df.sum$average_reaction_time[i]<-mean(df.fish$reaction_time, na.rm = TRUE)
df.sum$totalthigmo_full_4_minutes[i]<-mean(df.fish$totalthigmo_full_4_minutes, na.rm = TRUE)
df.sum$totalmirror_full_4_minutes[i]<-mean(df.fish$totalmirror_full_4_minutes, na.rm = TRUE)
df.sum$unique_zones_entered_full_4_minutes[i]<-mean(df.fish$unique_zones_entered, na.rm = TRUE)
df.sum$entries_into_center_full_4_minutes[i]<-mean(df.fish$entries_into_center_full_4_minutes, na.rm = TRUE)
df.sum$average_latency_enter_either_screen[i]<- mean(df.fish$average_latency_enter_either_screen, na.rm = TRUE)
df.sum$average_prop_time_center_full_4_minutes[i]<-mean(df.fish$center_full_4_minutes, na.rm = TRUE)
}
#For each ratio, get the number of "usable trials" (i.e. where fish actually enters both sides) for full 4 minutes and T30 to T50. Then get the median performance for each ratio.
#Note on how I'm calculating medians: if there's 3 trials in a ratio, take the median of 3. If there's only 2, take the mean of the two. If there's only 1, just take that one
for(i in 1:length(fish_list)){
df.fish<- filter(df, fishname == fish_list[i])
df.fish.50<-filter(df.fish,ratio == '50')
df.fish.67<-filter(df.fish,ratio == '67')
df.fish.75<-filter(df.fish,ratio == '75')
if (df.fish$fishname[1] == 'gideon'){
df.fish$leftscreen_full_4_minutes[2]<-NA
df.fish$rightscreen_full_4_minutes[2]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$leftscreen_T30_to_T50[2]<-NA
df.fish$rightscreen_T30_to_T50[2]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$correctscreen_full_4_minutes[2]<-NA
df.fish$incorrectscreen_full_4_minutes[2]<-NA
df.fish$correctscreen_T30_to_T50[2]<-NA
df.fish$incorrectscreen_T30_to_T50[2]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$performancescreen_full_4_minutes[2]<-NA
df.fish$performancescreen_T30_to_T50[2]<-NA
df.fish$perf_greater_than_60_full_4_minutes[2]<-NA
df.fish$perf_greater_than_60_T30_to_T50[2]<-NA
df.fish$latency_enter_corr[2]<-NA
df.fish$latency_enter_incorr[2]<-NA
df.fish$screen_entered_first[2]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[2]<-NA
df.fish$latency_enter_either_screen[2]<-NA
df.fish$center_full_4_minutes[2]<-NA
}
if (df.fish$fishname[1] == 'wildflower'){
df.fish$leftscreen_full_4_minutes[3]<-NA
df.fish$rightscreen_full_4_minutes[3]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$leftscreen_T30_to_T50[3]<-NA
df.fish$rightscreen_T30_to_T50[3]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$correctscreen_full_4_minutes[3]<-NA
df.fish$incorrectscreen_full_4_minutes[3]<-NA
df.fish$correctscreen_T30_to_T50[3]<-NA
df.fish$incorrectscreen_T30_to_T50[3]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$performancescreen_full_4_minutes[3]<-NA
df.fish$performancescreen_T30_to_T50[3]<-NA
df.fish$perf_greater_than_60_full_4_minutes[3]<-NA
df.fish$perf_greater_than_60_T30_to_T50[3]<-NA
df.fish$latency_enter_corr[3]<-NA
df.fish$latency_enter_incorr[3]<-NA
df.fish$screen_entered_first[3]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[3]<-NA
df.fish$latency_enter_either_screen[3]<-NA
df.fish$center_full_4_minutes[3]<-NA
}
if (df.fish$fishname[1] == 'willis'){
df.fish$leftscreen_full_4_minutes[6]<-NA
df.fish$rightscreen_full_4_minutes[6]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$leftscreen_T30_to_T50[6]<-NA
df.fish$rightscreen_T30_to_T50[6]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$correctscreen_full_4_minutes[6]<-NA
df.fish$incorrectscreen_full_4_minutes[6]<-NA
df.fish$correctscreen_T30_to_T50[6]<-NA
df.fish$incorrectscreen_T30_to_T50[6]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$performancescreen_full_4_minutes[6]<-NA
df.fish$performancescreen_T30_to_T50[6]<-NA
df.fish$perf_greater_than_60_full_4_minutes[6]<-NA
df.fish$perf_greater_than_60_T30_to_T50[6]<-NA
df.fish$latency_enter_corr[6]<-NA
df.fish$latency_enter_incorr[6]<-NA
df.fish$screen_entered_first[6]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[6]<-NA
df.fish$latency_enter_either_screen[6]<-NA
df.fish$center_full_4_minutes[6]<-NA
}
df.sum$average_performance_across_all_9_testing_trials_using_full_4_minutes_data[i]<- mean(df.fish$performancescreen_full_4_minutes, na.rm=TRUE)
df.sum$average_performance_across_all_9_testing_trials_using_T30_to_T50_data[i]<- mean(df.fish$performancescreen_T30_to_T50, na.rm=TRUE)
df.sum$total_number_of_testing_trials_using_full_4_minutes_data[i]<- nrow(df.fish) - sum(is.na(df.fish$performancescreen_full_4_minutes))
df.sum$total_number_of_testing_trials_using_T30_to_T50_data[i]<- nrow(df.fish) - sum(is.na(df.fish$performancescreen_T30_to_T50))
df.sum$number_of_trials_on_0.50_ratio_using_full_4_minutes_data[i]<- nrow(df.fish.50) - sum(is.na(df.fish.50$performancescreen_full_4_minutes))
df.sum$number_of_trials_on_0.67_ratio_using_full_4_minutes_data[i]<- nrow(df.fish.67) - sum(is.na(df.fish.67$performancescreen_full_4_minutes))
df.sum$number_of_trials_on_0.75_ratio_using_full_4_minutes_data[i]<- nrow(df.fish.75) - sum(is.na(df.fish.75$performancescreen_full_4_minutes))
df.sum$number_of_trials_on_0.50_ratio_using_T30_to_T50_data[i]<- nrow(df.fish.50) - sum(is.na(df.fish.50$performancescreen_T30_to_T50))
df.sum$number_of_trials_on_0.67_ratio_using_T30_to_T50_data[i]<- nrow(df.fish.67) - sum(is.na(df.fish.67$performancescreen_T30_to_T50))
df.sum$number_of_trials_on_0.75_ratio_using_T30_to_T50_data[i]<- nrow(df.fish.75) - sum(is.na(df.fish.75$performancescreen_T30_to_T50))
}
for(i in 1:length(fish_list)){
df.fish<- filter(df, fishname == fish_list[i])
if (df.fish$fishname[1] == 'gideon'){
df.fish$leftscreen_full_4_minutes[2]<-NA
df.fish$rightscreen_full_4_minutes[2]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$leftscreen_T30_to_T50[2]<-NA
df.fish$rightscreen_T30_to_T50[2]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$correctscreen_full_4_minutes[2]<-NA
df.fish$incorrectscreen_full_4_minutes[2]<-NA
df.fish$correctscreen_T30_to_T50[2]<-NA
df.fish$incorrectscreen_T30_to_T50[2]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$performancescreen_full_4_minutes[2]<-NA
df.fish$performancescreen_T30_to_T50[2]<-NA
df.fish$perf_greater_than_60_full_4_minutes[2]<-NA
df.fish$perf_greater_than_60_T30_to_T50[2]<-NA
df.fish$latency_enter_corr[2]<-NA
df.fish$latency_enter_incorr[2]<-NA
df.fish$screen_entered_first[2]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[2]<-NA
df.fish$latency_enter_either_screen[2]<-NA
df.fish$center_full_4_minutes[2]<-NA
}
if (df.fish$fishname[1] == 'wildflower'){
df.fish$leftscreen_full_4_minutes[3]<-NA
df.fish$rightscreen_full_4_minutes[3]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$leftscreen_T30_to_T50[3]<-NA
df.fish$rightscreen_T30_to_T50[3]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$correctscreen_full_4_minutes[3]<-NA
df.fish$incorrectscreen_full_4_minutes[3]<-NA
df.fish$correctscreen_T30_to_T50[3]<-NA
df.fish$incorrectscreen_T30_to_T50[3]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$performancescreen_full_4_minutes[3]<-NA
df.fish$performancescreen_T30_to_T50[3]<-NA
df.fish$perf_greater_than_60_full_4_minutes[3]<-NA
df.fish$perf_greater_than_60_T30_to_T50[3]<-NA
df.fish$latency_enter_corr[3]<-NA
df.fish$latency_enter_incorr[3]<-NA
df.fish$screen_entered_first[3]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[3]<-NA
df.fish$latency_enter_either_screen[3]<-NA
df.fish$center_full_4_minutes[3]<-NA
}
if (df.fish$fishname[1] == 'willis'){
df.fish$leftscreen_full_4_minutes[6]<-NA
df.fish$rightscreen_full_4_minutes[6]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$leftscreen_T30_to_T50[6]<-NA
df.fish$rightscreen_T30_to_T50[6]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$correctscreen_full_4_minutes[6]<-NA
df.fish$incorrectscreen_full_4_minutes[6]<-NA
df.fish$correctscreen_T30_to_T50[6]<-NA
df.fish$incorrectscreen_T30_to_T50[6]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$performancescreen_full_4_minutes[6]<-NA
df.fish$performancescreen_T30_to_T50[6]<-NA
df.fish$perf_greater_than_60_full_4_minutes[6]<-NA
df.fish$perf_greater_than_60_T30_to_T50[6]<-NA
df.fish$latency_enter_corr[6]<-NA
df.fish$latency_enter_incorr[6]<-NA
df.fish$screen_entered_first[6]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[6]<-NA
df.fish$latency_enter_either_screen[6]<-NA
df.fish$center_full_4_minutes[6]<-NA
}
df.fish.50<-filter(df.fish,ratio == '50')
df.fish.67<-filter(df.fish,ratio == '67')
df.fish.75<-filter(df.fish,ratio == '75')
if ((nrow(df.fish.50) - sum(is.na(df.fish.50$performancescreen_full_4_minutes))) == 3){
df.sum$median_performance_on_0.50_ratio_using_full_4_minutes_data[i]<-median(df.fish.50$performancescreen_full_4_minutes)}
else if ((nrow(df.fish.50) - sum(is.na(df.fish.50$performancescreen_full_4_minutes))) == 2){
df.sum$median_performance_on_0.50_ratio_using_full_4_minutes_data[i]<-mean(df.fish.50$performancescreen_full_4_minutes, na.rm=TRUE)}
else if ((nrow(df.fish.50) - sum(is.na(df.fish.50$performancescreen_full_4_minutes))) == 1){
df.sum$median_performance_on_0.50_ratio_using_full_4_minutes_data[i]<-mean(df.fish.50$performancescreen_full_4_minutes, na.rm=TRUE)}
else{
df.sum$median_performance_on_0.50_ratio_using_full_4_minutes_data[i]<-NA}
if ((nrow(df.fish.67) - sum(is.na(df.fish.67$performancescreen_full_4_minutes))) == 3){
df.sum$median_performance_on_0.67_ratio_using_full_4_minutes_data[i]<-median(df.fish.67$performancescreen_full_4_minutes)}
else if ((nrow(df.fish.67) - sum(is.na(df.fish.67$performancescreen_full_4_minutes))) == 2){
df.sum$median_performance_on_0.67_ratio_using_full_4_minutes_data[i]<-mean(df.fish.67$performancescreen_full_4_minutes, na.rm=TRUE)}
else if ((nrow(df.fish.67) - sum(is.na(df.fish.67$performancescreen_full_4_minutes))) == 1){
df.sum$median_performance_on_0.67_ratio_using_full_4_minutes_data[i]<-mean(df.fish.67$performancescreen_full_4_minutes, na.rm=TRUE)}
else{
df.sum$median_performance_on_0.67_ratio_using_full_4_minutes_data[i]<-NA}
if ((nrow(df.fish.75) - sum(is.na(df.fish.75$performancescreen_full_4_minutes))) == 3){
df.sum$median_performance_on_0.75_ratio_using_full_4_minutes_data[i]<-median(df.fish.75$performancescreen_full_4_minutes)}
else if ((nrow(df.fish.75) - sum(is.na(df.fish.75$performancescreen_full_4_minutes))) == 2){
df.sum$median_performance_on_0.75_ratio_using_full_4_minutes_data[i]<-mean(df.fish.75$performancescreen_full_4_minutes, na.rm=TRUE)}
else if ((nrow(df.fish.75) - sum(is.na(df.fish.75$performancescreen_full_4_minutes))) == 1){
df.sum$median_performance_on_0.75_ratio_using_full_4_minutes_data[i]<-mean(df.fish.75$performancescreen_full_4_minutes, na.rm=TRUE)}
else{
df.sum$median_performance_on_0.75_ratio_using_full_4_minutes_data[i]<-NA}
if ((nrow(df.fish.50) - sum(is.na(df.fish.50$performancescreen_T30_to_T50))) == 3){
df.sum$median_performance_on_0.50_ratio_using_T30_to_T50_data[i]<-median(df.fish.50$performancescreen_T30_to_T50)}
else if ((nrow(df.fish.50) - sum(is.na(df.fish.50$performancescreen_T30_to_T50))) == 2){
df.sum$median_performance_on_0.50_ratio_using_T30_to_T50_data[i]<-mean(df.fish.50$performancescreen_T30_to_T50, na.rm=TRUE)}
else if ((nrow(df.fish.50) - sum(is.na(df.fish.50$performancescreen_T30_to_T50))) == 1){
df.sum$median_performance_on_0.50_ratio_using_T30_to_T50_data[i]<-mean(df.fish.50$performancescreen_T30_to_T50, na.rm=TRUE)}
else{
df.sum$median_performance_on_0.50_ratio_using_T30_to_T50_data[i]<-NA}
if ((nrow(df.fish.67) - sum(is.na(df.fish.67$performancescreen_T30_to_T50))) == 3){
df.sum$median_performance_on_0.67_ratio_using_T30_to_T50_data[i]<-median(df.fish.67$performancescreen_T30_to_T50)}
else if ((nrow(df.fish.67) - sum(is.na(df.fish.67$performancescreen_T30_to_T50))) == 2){
df.sum$median_performance_on_0.67_ratio_using_T30_to_T50_data[i]<-mean(df.fish.67$performancescreen_T30_to_T50, na.rm=TRUE)}
else if ((nrow(df.fish.67) - sum(is.na(df.fish.67$performancescreen_T30_to_T50))) == 1){
df.sum$median_performance_on_0.67_ratio_using_T30_to_T50_data[i]<-mean(df.fish.67$performancescreen_T30_to_T50, na.rm=TRUE)}
else{
df.sum$median_performance_on_0.67_ratio_using_T30_to_T50_data[i]<-NA}
if ((nrow(df.fish.75) - sum(is.na(df.fish.75$performancescreen_T30_to_T50))) == 3){
df.sum$median_performance_on_0.75_ratio_using_T30_to_T50_data[i]<-median(df.fish.75$performancescreen_T30_to_T50)}
else if ((nrow(df.fish.75) - sum(is.na(df.fish.75$performancescreen_T30_to_T50))) == 2){
df.sum$median_performance_on_0.75_ratio_using_T30_to_T50_data[i]<-mean(df.fish.75$performancescreen_T30_to_T50, na.rm=TRUE)}
else if ((nrow(df.fish.75) - sum(is.na(df.fish.75$performancescreen_T30_to_T50))) == 1){
df.sum$median_performance_on_0.75_ratio_using_T30_to_T50_data[i]<-mean(df.fish.75$performancescreen_T30_to_T50, na.rm=TRUE)}
else{
df.sum$median_performance_on_0.75_ratio_using_T30_to_T50_data[i]<-NA}
}
