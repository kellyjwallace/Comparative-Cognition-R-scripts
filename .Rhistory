ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")+
hline(x =4)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(x =4)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(y =4)
help(geom_hline)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept =[4,6,8,10,12,14,16,18,20)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept =[4,6,8,10,12,14,16,18,20])
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = [4])
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 4)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 2,4)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
geom_hline(yintercept = 10) +
geom_hline(yintercept = 15) +
geom_hline(yintercept = 20) +
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
geom_hline(yintercept = 10) +
geom_hline(yintercept = 15) +
geom_hline(yintercept = 20)
df.full$did_fish_have_a_median_above_60<-as.factor(df.full$did_fish_have_a_median_above_60)
df.full$detour_trial_1_did_fish_solve_barrier_problem<-as.numeric(df.full$detour_trial_1_did_fish_solve_barrier_problem)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
#geom_hline(yintercept = 10) +
#geom_hline(yintercept = 15) +
#geom_hline(yintercept = 20)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
geom_hline(yintercept = 10) +
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
geom_hline(yintercept = 10)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram(width = 6) +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram(aes(width = 6)) +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram(aes(width = 20)) +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
colnames(df.full)
test<-t.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity entries full four predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
df.full$detour_trial_1_did_fish_solve_barrier_problem<-as.factor(df.full$detour_trial_1_did_fish_solve_barrier_problem)
test<-t.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity entries full four predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity entries full four predict detour solve??') +
geom_text(x=1, y=10, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_number_of_entries_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_number_of_entries_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_number_of_entries_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity entries T0-29 predict detour solve??') +
geom_text(x=1, y=5, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_prop_time_thigmo_T0_to_T29s ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
test<-t.test(df.full$average_prop_time_thigmo_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_prop_time_thigmo_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_prop_time_thigmo_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity prop time thigmo predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_prop_time_mirror_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_prop_time_mirror_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_prop_time_mirror_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity prop time mirror predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
mod<- lm(df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier ~ df.full$time_to_barrier_contact_minus_start_time)
summary(mod)
number <- df.full %>% filter(!is.na(time_to_barrier_contact_minus_start_time)) %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(time_to_barrier_contact_minus_start_time, detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "time_to_barrier_contact_minus_start_time",y="average_performance_across_all_9_testing_trials_using_
full_4_minutes_data") +
ggtitle ("Note:Does latency to approach barrier predict latency to solve barrier problem??") +
geom_smooth(method = "lm")
p <- ggplot(df.full, aes(time_to_barrier_contact_minus_start_time, detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "time_to_barrier_contact_minus_start_time",y="detour_trial_1_barrier_problem_time_
around_barrier_minus_time_to_contact_barrier") +
ggtitle ("Note:Does latency to approach barrier predict latency to solve barrier problem??") +
geom_smooth(method = "lm")
p <- ggplot(df.full, aes(time_to_barrier_contact_minus_start_time, detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, color = sex))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "time_to_barrier_contact_minus_start_time",y="detour_trial_1_barrier_problem_time_
around_barrier_minus_time_to_contact_barrier") +
ggtitle ("Note:Does latency to approach barrier predict latency to solve barrier problem??") +
geom_smooth(method = "lm")
df.full
p <- ggplot(df.full, aes(time_to_barrier_contact_minus_start_time, detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, color = sex.y))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "time_to_barrier_contact_minus_start_time",y="detour_trial_1_barrier_problem_time_
around_barrier_minus_time_to_contact_barrier") +
ggtitle ("Note:Does latency to approach barrier predict latency to solve barrier problem??") +
geom_smooth(method = "lm")
colnames(df.full)
test<-t.test(df.full$standard_length ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$standard_length ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=standard_length)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does standard lengthr predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=standard_length)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does standard lengthr predict detour solve??') +
geom_text(x=1, y=2000, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
#Does learning a median predict aaverage_reaction_time?
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
df<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Comparative Cognition R Scripts/Numerosity Comparative Cognition Full Dataset May_7_2018.csv", col_names = TRUE, col_types = NULL)
df$number_of_medians_above_60_using_full_4_minutes_data<-as.factor(df$number_of_medians_above_60_using_full_4_minutes_data)
df$number_of_medians_above_60_using_T30_to_T50_data<-as.factor(df$number_of_medians_above_60_using_T30_to_T50_data)
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
df$did_fish_have_at_least_two_medians_above_60<-as.factor(df$did_fish_have_at_least_two_medians_above_60)
df.males<-filter(df, df$sex == "M")
df.males$sex_code<-0
df.females<-filter(df, df$sex == "F")
df.females$sex_code<-1
df<-full_join(df.males,df.females)
View(df)
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
test<-t.test(df$average_reaction_time~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_reaction_time~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_reaction_time)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=10, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_reaction_time?")
p
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(ggplot2)
library(dplyr)
library(rmarkdown)
library(knitr)
library(readr)
library(utils)
library(EnvStats)
library(hqmisc)
shuttleleft<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_L_framesofinterest.csv", col_names = TRUE, col_types = NULL)
shuttleright<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_R_framesofinterest.csv", col_names = TRUE, col_types = NULL)
file_list_left<- list.files("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets/left")
file_list_right<- list.files("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets/right")
file_list<- append(file_list_left, file_list_right)
file_list[1]
file_list
shuttleleft<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_L_framesofinterest.csv", col_names = TRUE, col_types = NULL)
shuttleleft<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_L_framesofinterest.csv", col_names = TRUE, col_types = NULL)
shuttleright<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_R_framesofinterest.csv", col_names = TRUE, col_types = NULL)
file_list_left<- list.files("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets/left")
file_list<- list.files("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
shuttleleft<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_L_framesofinterest.csv", col_names = TRUE, col_types = NULL)
shuttleright<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_R_framesofinterest.csv", col_names = TRUE, col_types = NULL)
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
file_list
file_list<- list.files("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
shuttleleft<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_L_framesofinterest.csv", col_names = TRUE, col_types = NULL)
shuttleright<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/Shuttlebox_Tracking_R_framesofinterest.csv", col_names = TRUE, col_types = NULL)
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[1], col_names = TRUE, col_types = NULL)
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[1], col_names = TRUE, col_types = NULL)
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[1], col_names = TRUE, col_types = NULL)
fishname <- strsplit(file_list[1],'_')[[1]][4]
startside <- strsplit(file_list[1],'_')[[1]][5]
if(startside == "L"){
df.full<- full_join(df,shuttleleft, by = 'frame_number')}
else if(startside == "R"){
if(startside == "L"){
df.full<- full_join(df,shuttleleft, by = 'frame_number')}
if(startside == "R"){
df.full<- full_join(df,shuttleright, by = 'frame_number')}
df.full
df.full<-df.full %>% mutate(distance_from_correct = abs(correct_x_pixel - x))
df.full.stim<-df.full %>% filter(type == 'stim')
df.full.gap<-df.full %>% filter(type == 'gap')
df.gap.sum<-group_by(df.gap, presentation)%>% summarize(avg_dist_from_correct_by_pres = mean(distance_from_correct, na.rm = TRUE))
df.gap.sum<-group_by(df.full.gap, presentation)%>% summarize(avg_dist_from_correct_by_pres = mean(distance_from_correct, na.rm = TRUE))
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle("NAME:")
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname)
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname, size = 14)
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname)
i<-1
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
fishname <- strsplit(file_list[i],'_')[[1]][4]
startside <- strsplit(file_list[i],'_')[[1]][5]
if(startside == "L"){
df.full<- full_join(df,shuttleleft, by = 'frame_number')}
if(startside == "R"){
df.full<- full_join(df,shuttleright, by = 'frame_number')}
df.full
df.full<-df.full %>% mutate(distance_from_correct = abs(correct_x_pixel - x))
df.full.stim<-df.full %>% filter(type == 'stim')
df.full.gap<-df.full %>% filter(type == 'gap')
#This is taking an average distance_from_correct for each gap/presentation
df.gap.sum<-group_by(df.full.gap, presentation)%>% summarize(avg_dist_from_correct_by_pres = mean(distance_from_correct, na.rm = TRUE))
#graph distance from screen during habituation and during stim  (sum across all presentations)
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname)
file_list
i<-2
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
fishname <- strsplit(file_list[i],'_')[[1]][4]
startside <- strsplit(file_list[i],'_')[[1]][5]
if(startside == "L"){
df.full<- full_join(df,shuttleleft, by = 'frame_number')}
if(startside == "R"){
df.full<- full_join(df,shuttleright, by = 'frame_number')}
df.full
df.full<-df.full %>% mutate(distance_from_correct = abs(correct_x_pixel - x))
df.full.stim<-df.full %>% filter(type == 'stim')
df.full.gap<-df.full %>% filter(type == 'gap')
#This is taking an average distance_from_correct for each gap/presentation
df.gap.sum<-group_by(df.full.gap, presentation)%>% summarize(avg_dist_from_correct_by_pres = mean(distance_from_correct, na.rm = TRUE))
#graph distance from screen during habituation and during stim  (sum across all presentations)
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname)
i<-3
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
fishname <- strsplit(file_list[i],'_')[[1]][4]
startside <- strsplit(file_list[i],'_')[[1]][5]
if(startside == "L"){
df.full<- full_join(df,shuttleleft, by = 'frame_number')}
if(startside == "R"){
df.full<- full_join(df,shuttleright, by = 'frame_number')}
df.full
df.full<-df.full %>% mutate(distance_from_correct = abs(correct_x_pixel - x))
df.full.stim<-df.full %>% filter(type == 'stim')
df.full.gap<-df.full %>% filter(type == 'gap')
#This is taking an average distance_from_correct for each gap/presentation
df.gap.sum<-group_by(df.full.gap, presentation)%>% summarize(avg_dist_from_correct_by_pres = mean(distance_from_correct, na.rm = TRUE))
#graph distance from screen during habituation and during stim  (sum across all presentations)
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname)
i<-4
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
fishname <- strsplit(file_list[i],'_')[[1]][4]
startside <- strsplit(file_list[i],'_')[[1]][5]
if(startside == "L"){
df.full<- full_join(df,shuttleleft, by = 'frame_number')}
if(startside == "R"){
df.full<- full_join(df,shuttleright, by = 'frame_number')}
df.full
df.full<-df.full %>% mutate(distance_from_correct = abs(correct_x_pixel - x))
df.full.stim<-df.full %>% filter(type == 'stim')
df.full.gap<-df.full %>% filter(type == 'gap')
#This is taking an average distance_from_correct for each gap/presentation
df.gap.sum<-group_by(df.full.gap, presentation)%>% summarize(avg_dist_from_correct_by_pres = mean(distance_from_correct, na.rm = TRUE))
#graph distance from screen during habituation and during stim  (sum across all presentations)
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname)
file_list[4]
file_list<- list.files("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
i<-4
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
fishname <- strsplit(file_list[i],'_')[[1]][4]
startside <- strsplit(file_list[i],'_')[[1]][5]
if(startside == "L"){
df.full<- full_join(df,shuttleleft, by = 'frame_number')}
if(startside == "R"){
df.full<- full_join(df,shuttleright, by = 'frame_number')}
df.full<-df.full %>% mutate(distance_from_correct = abs(correct_x_pixel - x))
df.full.stim<-df.full %>% filter(type == 'stim')
df.full.gap<-df.full %>% filter(type == 'gap')
#This is taking an average distance_from_correct for each gap/presentation
df.gap.sum<-group_by(df.full.gap, presentation)%>% summarize(avg_dist_from_correct_by_pres = mean(distance_from_correct, na.rm = TRUE))
#graph distance from screen during habituation and during stim  (sum across all presentations)
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname)
i<-5
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/score sheets")
df<- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
fishname <- strsplit(file_list[i],'_')[[1]][4]
startside <- strsplit(file_list[i],'_')[[1]][5]
if(startside == "L"){
df.full<- full_join(df,shuttleleft, by = 'frame_number')}
if(startside == "R"){
df.full<- full_join(df,shuttleright, by = 'frame_number')}
df.full<-df.full %>% mutate(distance_from_correct = abs(correct_x_pixel - x))
df.full.stim<-df.full %>% filter(type == 'stim')
df.full.gap<-df.full %>% filter(type == 'gap')
#This is taking an average distance_from_correct for each gap/presentation
df.gap.sum<-group_by(df.full.gap, presentation)%>% summarize(avg_dist_from_correct_by_pres = mean(distance_from_correct, na.rm = TRUE))
#graph distance from screen during habituation and during stim  (sum across all presentations)
p <- ggplot(df.gap.sum, aes(presentation, avg_dist_from_correct_by_pres))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
geom_smooth(method = "lm") +
geom_vline(xintercept =5)+
geom_vline(xintercept =10)+
geom_vline(xintercept =15)+
geom_vline(xintercept =20)+
geom_vline(xintercept =25)+
geom_vline(xintercept =30)+
ggtitle(fishname)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(rmarkdown)
library(knitr)
library(readr)
library(utils)
library(EnvStats)
shuttle<-read.csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Shuttlebox/shuttlebox_data_april_25_2018.csv")
det<-read.csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Detour/detour_data_for_R_April_5_2018.csv")
num<-read.csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Comparative Cognition R Scripts/Numerosity Comparative Cognition Full Dataset May_7_2018.csv")
df.full<- left_join(det,shuttle, by = 'fish_name')
df.full<- left_join(df.full,num, by = 'fish_name') #need to not join shuttlebox twice!
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
#WRITE IT OUT IF NEEDED
write_csv(df.full, 'Full_Comparative_Cognition_Data_Detour_Shuttlebox_Numerosity_May_1_2018.csv')
