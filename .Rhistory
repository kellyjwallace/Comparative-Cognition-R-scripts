#Does learning a median predict proportion_of_correct_first_choice?
test<-t.test(df$proportion_of_correct_first_choices~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$proportion_of_correct_first_choices~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=proportion_of_correct_first_choices)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=0.4, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict proportion_of_correct_first_choices?")
#Does learning a median predict average_latency_to_enter_correct_side?
test<-t.test(df$average_latency_to_enter_correct_side~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_latency_to_enter_correct_side~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_latency_to_enter_correct_side)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=0.4, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_latency_to_enter_correct_side?")
#Does learning a median predict average_number_of_entries_full_4_minutes?
test<-t.test(df$average_number_of_entries_full_4_minutes~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_number_of_entries_full_4_minutes~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=20, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_number_of_entries_full_4_minutes?")
#Does learning a median predict average_number_of_entries_T0_to_T29?
test<-t.test(df$average_number_of_entries_T0_to_T29~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_number_of_entries_T0_to_T29~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_number_of_entries_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=10, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_number_of_entries_T0_to_T29?")
#Does learning a median predict average_prop_time_thigmo_T0_to_T29?
test<-t.test(df$average_prop_time_thigmo_T0_to_T29~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_prop_time_thigmo_T0_to_T29~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_prop_time_thigmo_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=0.6, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_prop_time_thigmo_T0_to_T29?")
#Does learning a median predict average_prop_time_mirror_T0_to_T29?
test<-t.test(df$average_prop_time_mirror_T0_to_T29~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_prop_time_mirror_T0_to_T29~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_prop_time_mirror_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=0.6, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_prop_time_mirror_T0_to_T29?")
#Does learning a median predict average_number_of_entries_full_4_minutes?
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
test<-t.test(df$average_number_of_entries_full_4_minutes~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_number_of_entries_full_4_minutes~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=20, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_number_of_entries_full_4_minutes?")
p
#Does learning a median predict average_number_of_entries_T30_to_T50?
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
test<-t.test(df$average_number_of_entries_T30_to_T50~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_number_of_entries_T30_to_T50~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_number_of_entries_T30_to_T50)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=10, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_number_of_entries_T30_to_T50?")
p
#Does learning a median predict aaverage_reaction_time?
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
test<-t.test(df$average_reaction_time~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_reaction_time~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_reaction_time)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=10, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_reaction_time?")
p
#Does learning a median predict average_reaction_time?
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
test<-t.test(df$average_number_of_entries_full_4_minutes~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_number_of_entries_full_4_minutes~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=10, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_number of entries full four minutes?")
p
mod<- lm(df$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df$totalthigmo_full_4_minutes, na.rm = TRUE)
summary(mod)
number <- df %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(totalthigmo_full_4_minutes)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df, aes(totalthigmo_full_4_minutes, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4, color = "black") +
theme(text = element_text(size=10)) +
annotate("text", x=0.2, y=0.2, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "totalthigmo_full_4_minutes",y="average_performance_across_all_9_testing_trials
_using_T30_to_T50_data") +
ggtitle ("Does average prop time thigmo predict average performance (T30 to T50)") +
geom_smooth(method = "lm")
mod<- lm(df.females$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.females$totalthigmo_full_4_minutes, na.rm = TRUE)
summary(mod)
number <- df.females %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(totalthigmo_full_4_minutes)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.females, aes(totalthigmo_full_4_minutes, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4, color = "red") +
theme(text = element_text(size=10)) +
annotate("text", x=0.2, y=0.3, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "totalthigmo_full_4_minutes",y="average_performance_across_all_9_testing_trials
_using_T30_to_T50_data") +
ggtitle ("Does average prop time thigmo predict
average performance (T30 to T50)FEMALES") +
geom_smooth(method = "lm")
mod<- lm(df.males$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.males$totalthigmo_full_4_minutes, na.rm = TRUE)
summary(mod)
number <- df.males %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(totalthigmo_full_4_minutes)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.males, aes(totalthigmo_full_4_minutes, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4, color = "blue") +
theme(text = element_text(size=10)) +
annotate("text", x=0.2, y=0.2, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "totalthigmo_full_4_minutes",y="average_performance_across_all_9_testing_trials
_using_T30_to_T50_data") +
ggtitle ("Does average prop time thigmo predict
average performance (T30 to T50)MALES") +
geom_smooth(method = "lm")
mod<- lm(df$average_latency_to_enter_correct_side ~ df$average_number_of_entries_T0_to_T29, na.rm = TRUE)
summary(mod)
number <- df %>% filter(!is.na(average_latency_to_enter_correct_side)) %>% filter(!is.na(average_number_of_entries_T0_to_T29)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df, aes(average_number_of_entries_T0_to_T29, average_latency_to_enter_correct_side))
p + geom_point(size = 4) +
theme(text = element_text(size=10)) +
annotate("text", x=10, y=0.5, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "average_number_of_entries_T0_to_T29",y="average_latency_to_enter_correct_side") +
ggtitle ("Does average number of entries T0-T29 predict average latency to enter correct side") +
geom_smooth(method = "lm")
#Does average reaction time predict average performance (T30 to T50)FEMALES?
mod<- lm(df.females$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.females$average_reaction_time, na.rm = TRUE)
summary(mod)
number <- df.females %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(average_reaction_time)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.females, aes(average_reaction_time, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4) +
theme(text = element_text(size=10)) +
annotate("text", x=25, y=0.5, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "red") +
labs(x= "average_reaction_time",y="average_performance_across_all_9_testing_trials_
using_T30_to_T50_data") +
ggtitle ("Does average reaction time predict average performance (T30 to T50)?FEMALES") +
geom_smooth(method = "lm")
mod<- lm(df.females$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.females$average_reaction_time, na.rm = TRUE)
summary(mod)
number <- df.females %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(average_reaction_time)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.females, aes(average_reaction_time, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4, color = "red") +
theme(text = element_text(size=10)) +
annotate("text", x=25, y=0.5, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "average_reaction_time",y="average_performance_across_all_9_testing_trials_
using_T30_to_T50_data") +
ggtitle ("Does average reaction time predict average performance (T30 to T50)?FEMALES") +
geom_smooth(method = "lm")
mod<- lm(df.females$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.females$average_reaction_time, na.rm = TRUE)
summary(mod)
number <- df.females %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(average_reaction_time)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.females, aes(average_reaction_time, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4, color = "red") +
theme(text = element_text(size=10)) +
annotate("text", x=4, y=0.5, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "average_reaction_time",y="average_performance_across_all_9_testing_trials_
using_T30_to_T50_data") +
ggtitle ("Does average reaction time predict average performance (T30 to T50)?FEMALES") +
geom_smooth(method = "lm")
mod<- lm(df.females$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.females$average_reaction_time, na.rm = TRUE)
summary(mod)
number <- df.females %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(average_reaction_time)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.females, aes(average_reaction_time, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4, color = "red") +
theme(text = element_text(size=10)) +
annotate("text", x=15, y=0.5, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "average_reaction_time",y="average_performance_across_all_9_testing_trials_
using_T30_to_T50_data") +
ggtitle ("Does average reaction time predict average performance (T30 to T50)?FEMALES") +
geom_smooth(method = "lm")
mod<- lm(df.males$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.males$average_reaction_time, na.rm = TRUE)
summary(mod)
number <- df.males %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(average_reaction_time)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.males, aes(average_reaction_time, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4, color = "blue") +
theme(text = element_text(size=10)) +
annotate("text", x=25, y=0.5, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "average_reaction_time",y="average_performance_across_all_9_testing_trials_
using_T30_to_T50_data") +
ggtitle ("Does average reaction time predict average performance (T30 to T50)?MALES") +
geom_smooth(method = "lm")
mod<- lm(df$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df$average_reaction_time, na.rm = TRUE)
summary(mod)
number <- df %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% filter(!is.na(average_reaction_time)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df, aes(average_reaction_time, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 4) +
theme(text = element_text(size=10)) +
annotate("text", x=25, y=0.5, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "red") +
labs(x= "average_reaction_time",y="average_performance_across_all_9_testing_trials_
using_T30_to_T50_data") +
ggtitle ("Does average reaction time predict average performance (T30 to T50)?") +
geom_smooth(method = "lm")
library(ggplot2)
library(dplyr)
library(rmarkdown)
library(knitr)
library(readr)
library(utils)
library(EnvStats)
df<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Comparative Cognition R Scripts/Numerosity Comparative Cognition Full Dataset May_29_2018.csv", col_names = TRUE, col_types = NULL)
View(df)
det<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Detour/detour_data_for_R_April_5_2018.csv", col_names = TRUE, col_types = NULL)
View(det)
df.full<- full_join(df,det, by = 'fish_name')
df.full
df.full<-df.full %>% mutate(detour_trial_1_solved_code = detour_trial_1_did_fish_solve_barrier_problem + detour_trial_1_did_fish_solve_full_social_problem )
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
df.full$detour_trial_1_did_fish_solve_full_social_problem <-as.character(df.full$detour_trial_1_did_fish_solve_full_social_problem)
df.full<-df.full %>% mutate(detour_trial_1_latency_to_enter_reward_following_barrier_solution = detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier- detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)
df.full$number_of_medians_above_60_using_T30_to_T50_data<-as.numeric(df.full$number_of_medians_above_60_using_T30_to_T50_data)
#Note winthrop is removed because his detour trial 1 video started with fish in reward
#OPTIONAL WRITE OUT FULL CSV
#write_csv(df.full, filename = "Comparative Cognition Full Dataset Including Detour March_21_2017")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_full_4_minutes_data ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_full_4_minutes_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_full_4_minutes_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_
full_4_minutes_data") +
ggtitle ("Note:Does latency to solve barrier problem predict average
numerosity performance (full 4 minutes)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=200, y=0.3, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_
T30_to_T50_data") +
ggtitle ("Note:Does latency to solve barrier problem predict average
numerosity performance (T30 to T50)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_full_4_minutes_data ~ df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_full_4_minutes_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_full_4_minutes_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.2, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_full_problem_time_to_social_reward_
minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials
_using_full_4_minutes_data") +
ggtitle ("Note:Does latency to solve full solution problem predict average
performance (full 4 minutes)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data ~ df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% filter(!is.na(average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier, average_performance_across_all_9_testing_trials_using_T30_to_T50_data))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.2, label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier",y="average_performance_across_all_9_testing_trials_using_T30_to_T50_data") +
ggtitle ("Note:Does latency to solve full solution problem predict average
performance (T30 to T50)?") +
geom_smooth(method = "lm")
mod<- lm(df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=300, y=100, label= glue::glue("p = {round(p_value,8)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "detour_trial_1_barrier_problem_time_around_barrier_
minus_time_to_contact_barrier",y="detour_trial_1_full_problem_time_to_social_reward_
minus_time_to_contact_barrier") +
ggtitle ("Note:Does latency to solve barrier problem predict latency to solve full social problem?") +
geom_smooth(method = "lm")
mod<- lm(df.full$detour_trial_1_latency_to_enter_reward_following_barrier_solution ~ df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% filter(!is.na(detour_trial_1_latency_to_enter_reward_following_barrier_solution)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, detour_trial_1_latency_to_enter_reward_following_barrier_solution))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=300, y=100, label= glue::glue("p = {round(p_value,8)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
ggtitle ("Does latency to solve barrier problem predict
latency to enter reward zone following barrier solution?") +
geom_smooth(method = "lm")
mod<- lm(df.full$detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier ~ df.full$detour_trial_1_prop_time_in_social_reward_following_solution, na.rm = TRUE)
summary(mod)
number <- df.full %>% filter(!is.na(detour_trial_1_prop_time_in_social_reward_following_solution)) %>% filter(!is.na(detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(detour_trial_1_prop_time_in_social_reward_following_solution, detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=0.7, y=100, label= glue::glue("p = {round(p_value,8)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
ggtitle ("Does latency to solve barrier problem predict
latency to enter reward zone following barrier solution?") +
geom_smooth(method = "lm")
ggplot(df.full, aes(detour_trial_1_solved_code, fill = sex.y))+
geom_histogram() +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2)?")
#for anything that's slipt out by sex, use sex.y because that is the "sex" column from the detour data sheet which has the sex for individuals who we can't use their numerosity
ggplot(df.full, aes(detour_trial_1_solved_code, fill = sex.y))+
geom_histogram(aes(width = 4)) +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2)?")
ggplot(df.full, aes(detour_trial_1_solved_code, fill = sex.y))+
geom_histogram(aes(width = 12)) +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2)?")
install.package("waffle")
install.packages("waffle")
library(waffle)
waffle(c(df.full$detour_trial_1_solved_code), rows = 5, use_glyph = "fish")
install.packages("extrafont")
install.packages("extrafont")
install.packages("extrafont")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(rmarkdown)
library(knitr)
library(readr)
library(utils)
library(EnvStats)
library(waffle)
library(extrafont)
waffle(c(df.full$detour_trial_1_solved_code), rows = 5, use_glyph = "fish")
fonts()[grep("Awesome", fonts())]
test<-t.test(df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individuals who solve the full social problem have
shorter latencies to solving the barrier problem?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$time_to_barrier_contact_minus_start_time~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$time_to_barrier_contact_minus_start_time~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=time_to_barrier_contact_minus_start_time)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individual who solve the barrier problem have lower latencies
to approach the barrier (higher motivation?)') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$time_to_barrier_contact_minus_start_time~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$time_to_barrier_contact_minus_start_time~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=time_to_barrier_contact_minus_start_time)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Do individual who solve the full social problem have lower latencies
to approach the barrier (higher motivation?)') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
fonts()[grep("Awesome", fonts())]
waffle(c(df.full$detour_trial_1_solved_code), rows = 5, use_glyph = "fish")
https://github.com/FortAwesome/Font-Awesome/tree/master/fonts
install.packages(https://github.com/FortAwesome/Font-Awesome/tree/master/fonts)
test<-t.test(df.full$average_latency_to_enter_correct_side~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_latency_to_enter_correct_side~df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_latency_to_enter_correct_side)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus
did not solve barrier problem) predict numerosity average latency to enter correct side?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$mean_of_median_performance_on_each_ratio_T30_to_T50_data ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=mean_of_median_performance_on_each_ratio_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve barrier problem)
predict numerosity performance (mean of medians)?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_performance_across_all_9_testing_trials_using_T30_to_T50_data~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=average_performance_across_all_9_testing_trials_using_T30_to_T50_data)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus did not solve
barrier problem) predict numerosity performance over T30 to T50?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_latency_to_enter_correct_side~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_latency_to_enter_correct_side~df.full$detour_trial_1_did_fish_solve_full_social_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_full_social_problem, y=average_latency_to_enter_correct_side)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does Detour category (solved barrier problem versus
did not solve barrier problem) predict numerosity average latency to enter correct side?') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
waffle(c(df.full$detour_trial_1_solved_code), rows = 5, use_glyph = "fish")
fonts()[grep("Awesome", fonts())]
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(rmarkdown)
library(knitr)
library(readr)
library(utils)
library(EnvStats)
library(waffle)
library(extrafont)
fonts()[grep("Awesome", fonts())]
font_import()
