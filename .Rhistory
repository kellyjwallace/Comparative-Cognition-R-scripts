df.fish$perf_greater_than_60_T30_to_T50[2]<-NA
df.fish$latency_enter_corr[2]<-NA
df.fish$latency_enter_incorr[2]<-NA
df.fish$screen_entered_first[2]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[2]<-NA
}
if (df.fish$fishname[1] == 'wildflower'){
df.fish$leftscreen_full_4_minutes[3]<-NA
df.fish$rightscreen_full_4_minutes[3]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$leftscreen_T30_to_T50[3]<-NA
df.fish$rightscreen_T30_to_T50[3]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$correctscreen_full_4_minutes[3]<-NA
df.fish$incorrectscreen_full_4_minutes[3]<-NA
df.fish$correctscreen_T30_to_T50[3]<-NA
df.fish$incorrectscreen_T30_to_T50[3]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$performancescreen_full_4_minutes[3]<-NA
df.fish$performancescreen_T30_to_T50[3]<-NA
df.fish$perf_greater_than_60_full_4_minutes[3]<-NA
df.fish$perf_greater_than_60_T30_to_T50[3]<-NA
df.fish$latency_enter_corr[3]<-NA
df.fish$latency_enter_incorr[3]<-NA
df.fish$screen_entered_first[3]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[3]<-NA
}
if (df.fish$fishname[1] == 'willis'){
df.fish$leftscreen_full_4_minutes[6]<-NA
df.fish$rightscreen_full_4_minutes[6]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$leftscreen_T30_to_T50[6]<-NA
df.fish$rightscreen_T30_to_T50[6]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$correctscreen_full_4_minutes[6]<-NA
df.fish$incorrectscreen_full_4_minutes[6]<-NA
df.fish$correctscreen_T30_to_T50[6]<-NA
df.fish$incorrectscreen_T30_to_T50[6]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$performancescreen_full_4_minutes[6]<-NA
df.fish$performancescreen_T30_to_T50[6]<-NA
df.fish$perf_greater_than_60_full_4_minutes[6]<-NA
df.fish$perf_greater_than_60_T30_to_T50[6]<-NA
df.fish$latency_enter_corr[6]<-NA
df.fish$latency_enter_incorr[6]<-NA
df.fish$screen_entered_first[6]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[6]<-NA
}
df.fish.correct<-filter(df.fish, df.fish$screen_entered_first == "correct")
number_correct<-nrow(df.fish.correct)
df.fish.incorrect<-filter(df.fish, df.fish$screen_entered_first == "incorrect")
number_incorrect<-nrow(df.fish.incorrect)
df.sum$proportion_of_correct_first_choices[i]<- number_correct/(number_incorrect+ number_correct)
}
#Get the number of testing trials in a row where a) performance was above 60% useing the full four minutes data, b) performance was above 60% using the T30 to T50 data, or c) if correct or was picked first
for(j in 1:nrow(df.sum)){
#print(j)
df.fish<- filter(df, fishname == fish_list[j])
df.fish[, c(12, 13)] <- sapply(df.fish[, c(12,13)], as.numeric)
if (df.fish$fishname[1] == 'gideon'){
df.fish$leftscreen_full_4_minutes[2]<-NA
df.fish$rightscreen_full_4_minutes[2]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$leftscreen_T30_to_T50[2]<-NA
df.fish$rightscreen_T30_to_T50[2]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$correctscreen_full_4_minutes[2]<-NA
df.fish$incorrectscreen_full_4_minutes[2]<-NA
df.fish$correctscreen_T30_to_T50[2]<-NA
df.fish$incorrectscreen_T30_to_T50[2]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[2]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[2]<-NA
df.fish$performancescreen_full_4_minutes[2]<-NA
df.fish$performancescreen_T30_to_T50[2]<-NA
df.fish$perf_greater_than_60_full_4_minutes[2]<-NA
df.fish$perf_greater_than_60_T30_to_T50[2]<-NA
df.fish$latency_enter_corr[2]<-NA
df.fish$latency_enter_incorr[2]<-NA
df.fish$screen_entered_first[2]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[2]<-NA
}
if (df.fish$fishname[1] == 'wildflower'){
df.fish$leftscreen_full_4_minutes[3]<-NA
df.fish$rightscreen_full_4_minutes[3]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$leftscreen_T30_to_T50[3]<-NA
df.fish$rightscreen_T30_to_T50[3]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$correctscreen_full_4_minutes[3]<-NA
df.fish$incorrectscreen_full_4_minutes[3]<-NA
df.fish$correctscreen_T30_to_T50[3]<-NA
df.fish$incorrectscreen_T30_to_T50[3]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[3]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[3]<-NA
df.fish$performancescreen_full_4_minutes[3]<-NA
df.fish$performancescreen_T30_to_T50[3]<-NA
df.fish$perf_greater_than_60_full_4_minutes[3]<-NA
df.fish$perf_greater_than_60_T30_to_T50[3]<-NA
df.fish$latency_enter_corr[3]<-NA
df.fish$latency_enter_incorr[3]<-NA
df.fish$screen_entered_first[3]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[3]<-NA
}
if (df.fish$fishname[1] == 'willis'){
df.fish$leftscreen_full_4_minutes[6]<-NA
df.fish$rightscreen_full_4_minutes[6]<-NA
df.fish$leftscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$rightscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$leftscreen_T30_to_T50[6]<-NA
df.fish$rightscreen_T30_to_T50[6]<-NA
df.fish$leftscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$rightscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$correctscreen_full_4_minutes[6]<-NA
df.fish$incorrectscreen_full_4_minutes[6]<-NA
df.fish$correctscreen_T30_to_T50[6]<-NA
df.fish$incorrectscreen_T30_to_T50[6]<-NA
df.fish$correctscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$incorrectscreen_full_4_minutes_absolute_seconds[6]<-NA
df.fish$correctscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$incorrectscreen_T30_to_T50_absolute_seconds[6]<-NA
df.fish$performancescreen_full_4_minutes[6]<-NA
df.fish$performancescreen_T30_to_T50[6]<-NA
df.fish$perf_greater_than_60_full_4_minutes[6]<-NA
df.fish$perf_greater_than_60_T30_to_T50[6]<-NA
df.fish$latency_enter_corr[6]<-NA
df.fish$latency_enter_incorr[6]<-NA
df.fish$screen_entered_first[6]<-NA
df.fish$latency_enter_corr_filtered_just_correct_choice[6]<-NA
}
df.fish<- df.fish[order(df.fish$day, df.fish$trial),]
countlist_full_4_minutes <- vector(length=9)
countlist_T30_to_T50 <- vector(length=9)
countlist_correct_choice_first <- vector(length=9)
countlist_full_4_minutes[1] <- 0
countlist_T30_to_T50[1] <- 0
countlist_correct_choice_first[1] <- 0
for(i in 1:nrow(df.fish)){
if (is.na(df.fish$perf_greater_than_60_full_4_minutes[i]) == TRUE){
if(i == 1){
countlist_full_4_minutes[i]<- 0}
else{
countlist_full_4_minutes[i]<- countlist_full_4_minutes[i-1]}}
else if (df.fish$perf_greater_than_60_full_4_minutes[i] == 1){
if(i == 1){
countlist_full_4_minutes[i]<- 1}
else{
countlist_full_4_minutes[i]<- countlist_full_4_minutes[i-1] + 1}}
else if (df.fish$perf_greater_than_60_full_4_minutes[i] == 0){
countlist_full_4_minutes[i]<- 0}
}
for(i in 1:nrow(df.fish)){
if (is.na(df.fish$perf_greater_than_60_T30_to_T50[i]) == TRUE){
if(i == 1){
countlist_T30_to_T50[i]<- 0}
else{
countlist_T30_to_T50[i]<- countlist_T30_to_T50[i-1]}}
else if (df.fish$perf_greater_than_60_T30_to_T50[i] == 1){
if(i == 1){
countlist_T30_to_T50[i]<- 1}
else{
countlist_T30_to_T50[i]<- countlist_T30_to_T50[i-1] + 1}}
else if (df.fish$perf_greater_than_60_T30_to_T50[i] == 0){
countlist_T30_to_T50[i]<- 0}
}
for(i in 1:nrow(df.fish)){
if (is.na(df.fish$screen_entered_first[i]) == TRUE){
if(i == 1){
countlist_correct_choice_first[i]<- 0}
else{
countlist_correct_choice_first[i]<- countlist_correct_choice_first[i-1]}}
else if (df.fish$screen_entered_first[i] == 'incorrect'){
countlist_correct_choice_first[i]<- 0}
else if (df.fish$screen_entered_first[i] == 'correct'){
if(i == 1){
countlist_correct_choice_first[i]<- 1}
else{
countlist_correct_choice_first[i]<- countlist_correct_choice_first[i-1] + 1}}
}
streak.full_4_minutes<-max(countlist_full_4_minutes)
streak.T30_to_T50<-max(countlist_T30_to_T50)
streak.correct_choice_first<- max(countlist_correct_choice_first)
df.sum$number_of_trials_in_a_row_greater_than_60_percent_full_4_minutes[j] <- streak.full_4_minutes
df.sum$number_of_trials_in_a_row_greater_than_60_percent_T30_to_T50[j] <- streak.T30_to_T50
df.sum$number_of_trials_in_a_row_correct_choice_first[j] <- streak.correct_choice_first
}
#This is to check for any score sheets where the entries are doubled, don't actually need to rerun this part
for(i in 1:length(file_list)){
setwd("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/numerosity cc score sheets")
fil <- read_csv(file_list[i], col_names = TRUE, col_types = NULL)
filename <- file_list[i]
if (fil$code[1] == fil$code[2]){
print (filename)
}
}
#get mean of medians (i.e. mean of the 3 values: median performance on 50, 67, and 75)
for(i in 1:nrow(df.sum)){
df.sum$mean_of_median_performance_on_each_ratio_full_four_minutes_data[i] <- mean(c(df.sum$median_performance_on_0.50_ratio_using_full_4_minutes_data[i],df.sum$median_performance_on_0.67_ratio_using_full_4_minutes_data[i], df.sum$median_performance_on_0.75_ratio_using_full_4_minutes_data[i]), na.rm = TRUE)
df.sum$mean_of_median_performance_on_each_ratio_T30_to_T50_data[i] <- mean(c(df.sum$median_performance_on_0.50_ratio_using_T30_to_T50_data[i],df.sum$median_performance_on_0.67_ratio_using_T30_to_T50_data[i], df.sum$median_performance_on_0.75_ratio_using_T30_to_T50_data[i]), na.rm = TRUE)
}
#Export as a csv file
write_csv(df.sum, "Numerosity Comparative Cognition Full Dataset May_7_2018.csv")
write_csv(df.sum, "Numerosity Comparative Cognition Full Dataset May_7_2018.csv")
write_csv(df.sum, "Numerosity Comparative Cognition Full Dataset May_7_2018.csv")
ggplot(df.full, aes(detour_trial_1_solved_code, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2),
color = numerosity learning category?")
df<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Comparative Cognition R Scripts/Numerosity Comparative Cognition Full Dataset May_7_2018.csv", col_names = TRUE, col_types = NULL)
View(df)
det<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Detour/detour_data_for_R_April_5_2018.csv", col_names = TRUE, col_types = NULL)
View(det)
df.full<- full_join(df,det, by = 'fish_name')
df.full
df.full<-df.full %>% mutate(detour_trial_1_solved_code = detour_trial_1_did_fish_solve_barrier_problem + detour_trial_1_did_fish_solve_full_social_problem )
df.full$detour_trial_1_did_fish_solve_barrier_problem <-as.character(df.full$detour_trial_1_did_fish_solve_barrier_problem)
df.full$detour_trial_1_did_fish_solve_full_social_problem <-as.character(df.full$detour_trial_1_did_fish_solve_full_social_problem)
df.full<-df.full %>% mutate(detour_trial_1_latency_to_enter_reward_following_barrier_solution = detour_trial_1_full_problem_time_to_social_reward_minus_time_to_contact_barrier- detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)
df.full$number_of_medians_above_60_using_T30_to_T50_data<-as.numeric(df.full$number_of_medians_above_60_using_T30_to_T50_data)
ggplot(df.full, aes(detour_trial_1_solved_code, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2),
color = numerosity learning category?")
df.full$did_fish_have_a_median_above_60<-as.factor(df.full$did_fish_have_a_median_above_60)
ggplot(df.full, aes(detour_trial_1_solved_code, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals did not solve (0),
only solved barrier(1) or solved barrier and entered reward zone(2),
color = numerosity learning category?")
colnames(df.full)
df.full$did_fish_have_a_median_above_60<-as.factor(df.full$did_fish_have_a_median_above_60)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
df.full$did_fish_have_a_median_above_60<-as.factor(df.full$did_fish_have_a_median_above_60)
df.full$detour_trial_1_did_fish_solve_barrier_problem<-as.factor(df.fulldetour_trial_1_did_fish_solve_barrier_problem
)
df.full$did_fish_have_a_median_above_60<-as.factor(df.full$did_fish_have_a_median_above_60)
df.full$detour_trial_1_did_fish_solve_barrier_problem<-as.factor(df.full$detour_trial_1_did_fish_solve_barrier_problem)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
df.full$did_fish_have_a_median_above_60<-as.factor(df.full$did_fish_have_a_median_above_60)
df.full$detour_trial_1_did_fish_solve_barrier_problem<-as.numeric(df.full$detour_trial_1_did_fish_solve_barrier_problem)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")+
hline(x =4)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(x =4)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(y =4)
help(geom_hline)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept =[4,6,8,10,12,14,16,18,20)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept =[4,6,8,10,12,14,16,18,20])
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = [4])
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 4)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 2,4)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
geom_hline(yintercept = 10) +
geom_hline(yintercept = 15) +
geom_hline(yintercept = 20) +
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
geom_hline(yintercept = 10) +
geom_hline(yintercept = 15) +
geom_hline(yintercept = 20)
df.full$did_fish_have_a_median_above_60<-as.factor(df.full$did_fish_have_a_median_above_60)
df.full$detour_trial_1_did_fish_solve_barrier_problem<-as.numeric(df.full$detour_trial_1_did_fish_solve_barrier_problem)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
#geom_hline(yintercept = 10) +
#geom_hline(yintercept = 15) +
#geom_hline(yintercept = 20)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
geom_hline(yintercept = 10) +
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram() +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?") +
geom_hline(yintercept = 5) +
geom_hline(yintercept = 10)
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram(width = 6) +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram(aes(width = 6)) +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
ggplot(df.full, aes(detour_trial_1_did_fish_solve_barrier_problem, fill = did_fish_have_a_median_above_60))+
geom_histogram(aes(width = 20)) +
ggtitle ("How many individuals solved detour barrier, and of those
how many learned numerosity?")
colnames(df.full)
test<-t.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity entries full four predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
df.full$detour_trial_1_did_fish_solve_barrier_problem<-as.factor(df.full$detour_trial_1_did_fish_solve_barrier_problem)
test<-t.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity entries full four predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_number_of_entries_full_4_minutes ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_number_of_entries_full_4_minutes)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity entries full four predict detour solve??') +
geom_text(x=1, y=10, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_number_of_entries_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_number_of_entries_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_number_of_entries_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity entries T0-29 predict detour solve??') +
geom_text(x=1, y=5, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_prop_time_thigmo_T0_to_T29s ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
test<-t.test(df.full$average_prop_time_thigmo_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_prop_time_thigmo_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_prop_time_thigmo_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity prop time thigmo predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
test<-t.test(df.full$average_prop_time_mirror_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$average_prop_time_mirror_T0_to_T29 ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=average_prop_time_mirror_T0_to_T29)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does numerosity prop time mirror predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
mod<- lm(df.full$detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier ~ df.full$time_to_barrier_contact_minus_start_time)
summary(mod)
number <- df.full %>% filter(!is.na(time_to_barrier_contact_minus_start_time)) %>% filter(!is.na(detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier)) %>% nrow
p_value <- mod %>% broom::tidy() %>% filter(term != "(Intercept)") %>% select(p.value) %>% unlist
r_squared <- mod %>% broom::glance() %>% select(r.squared) %>% unlist
p <- ggplot(df.full, aes(time_to_barrier_contact_minus_start_time, detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "time_to_barrier_contact_minus_start_time",y="average_performance_across_all_9_testing_trials_using_
full_4_minutes_data") +
ggtitle ("Note:Does latency to approach barrier predict latency to solve barrier problem??") +
geom_smooth(method = "lm")
p <- ggplot(df.full, aes(time_to_barrier_contact_minus_start_time, detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "time_to_barrier_contact_minus_start_time",y="detour_trial_1_barrier_problem_time_
around_barrier_minus_time_to_contact_barrier") +
ggtitle ("Note:Does latency to approach barrier predict latency to solve barrier problem??") +
geom_smooth(method = "lm")
p <- ggplot(df.full, aes(time_to_barrier_contact_minus_start_time, detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, color = sex))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "time_to_barrier_contact_minus_start_time",y="detour_trial_1_barrier_problem_time_
around_barrier_minus_time_to_contact_barrier") +
ggtitle ("Note:Does latency to approach barrier predict latency to solve barrier problem??") +
geom_smooth(method = "lm")
df.full
p <- ggplot(df.full, aes(time_to_barrier_contact_minus_start_time, detour_trial_1_barrier_problem_time_around_barrier_minus_time_to_contact_barrier, color = sex.y))
p + geom_point(size = 3) +
theme(text = element_text(size=10)) +
annotate("text", x=150, y=0.3,label= glue::glue("p = {round(p_value,4)}, R-squared:  {round(r_squared,3)}
n = {number}"), size = 6, color = "black") +
labs(x= "time_to_barrier_contact_minus_start_time",y="detour_trial_1_barrier_problem_time_
around_barrier_minus_time_to_contact_barrier") +
ggtitle ("Note:Does latency to approach barrier predict latency to solve barrier problem??") +
geom_smooth(method = "lm")
colnames(df.full)
test<-t.test(df.full$standard_length ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df.full$standard_length ~ df.full$detour_trial_1_did_fish_solve_barrier_problem)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=standard_length)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does standard lengthr predict detour solve??') +
geom_text(x=1, y=0.1, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
p <- ggplot(df.full, aes(x=detour_trial_1_did_fish_solve_barrier_problem, y=standard_length)) +
geom_boxplot()+ stat_n_text() +
ggtitle('Does standard lengthr predict detour solve??') +
geom_text(x=1, y=2000, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p
#Does learning a median predict aaverage_reaction_time?
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
df<- read_csv("C:/Users/Kelly/Desktop/Grad School/Cummings Lab/Comparative Cognition/Comparative Cognition R Scripts/Numerosity Comparative Cognition Full Dataset May_7_2018.csv", col_names = TRUE, col_types = NULL)
df$number_of_medians_above_60_using_full_4_minutes_data<-as.factor(df$number_of_medians_above_60_using_full_4_minutes_data)
df$number_of_medians_above_60_using_T30_to_T50_data<-as.factor(df$number_of_medians_above_60_using_T30_to_T50_data)
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
df$did_fish_have_at_least_two_medians_above_60<-as.factor(df$did_fish_have_at_least_two_medians_above_60)
df.males<-filter(df, df$sex == "M")
df.males$sex_code<-0
df.females<-filter(df, df$sex == "F")
df.females$sex_code<-1
df<-full_join(df.males,df.females)
View(df)
df$did_fish_have_a_median_above_60<-as.factor(df$did_fish_have_a_median_above_60)
test<-t.test(df$average_reaction_time~df$did_fish_have_a_median_above_60)
p_value_t<- test %>% broom::tidy() %>% select(p.value) %>% unlist
wilcox_test<-wilcox.test(df$average_reaction_time~df$did_fish_have_a_median_above_60)
p_value_wilcox<-wilcox_test$p.value
p <- ggplot(df, aes(x=did_fish_have_a_median_above_60, y=average_reaction_time)) +
geom_boxplot()+ stat_n_text() +
geom_text(x=1, y=10, label= glue::glue("p (t-test)= {round(p_value_t,4)},
p(wilcox) = {round(p_value_wilcox,4)}"), size = 6, color = "black")
p +  ggtitle ("Does learning 1+ median predict average_reaction_time?")
p
```{r, echo=FALSE, message=FALSE, warning=FALSE}
